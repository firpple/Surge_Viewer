@{
    ViewBag.Title = "SurgeViewer";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/Test/JacksonScript.js"></script>
<script src="~/Scripts/amcharts/amcharts.js"></script>
<script src="~/Scripts/amcharts/serial.js"></script>

<div class="jumbotron">

    <h2>Surge Viewer</h2>
    @{
        // Input company and topic data passed by URL
        // irib and MySQL used by default
        string queryString = "";
        string queryString2 = "";
        string[] topicList;
        string[] topicList2;

        string companyString = (string)ViewData["companyName"];
        string topicString = (string)ViewData["topicName"];
        string companyString2 = (string)ViewData["companyName2"];
        string topicString2 = (string)ViewData["topicName2"];

        if (companyString.IsEmpty() || topicString.IsEmpty())
        {
            companyString = "irib";
            topicString = "MySQL";
        }

        Html.BeginForm("PlotData", "Home", FormMethod.Get);
        <input type="text" name="companyName" value="@companyString" />
        <input type="text" name="topicName" value="@topicString" />
        <input type="submit" value="Submit" />
        Html.EndForm();

    }

    <hr />

    <script>
    // Amchart data configured for our needs
    var chartData = [];
    generateChartData();

    var chart = AmCharts.makeChart("chartdiv", {
        type: "serial",
        dataProvider: chartData,
        categoryField: "date",
        categoryAxis: {
            parseDates: true,
            gridAlpha: 0.15,
            minorGridEnabled: true,
            axisColor: "#DADADA"
        },
        valueAxes: [{
            axisAlpha: 0.2,
            id: "v1"
        }],
        graphs: [{
            title: "@companyString [@topicString]",
            id: "g1",
            valueAxis: "v1",
            valueField: "topicNum1",
            bullet: "round",
            bulletBorderColor: "#FFFFFF",
            bulletBorderAlpha: 1,
            lineThickness: 2,
            lineColor: "#b5030d",
            negativeLineColor: "#0352b5",
            balloonText: "[[category]]<br><b><span style='font-size:14px;'>value: [[value]]</span></b>"
        @{
            if (!companyString2.IsEmpty() && !topicString2.IsEmpty())
            {
                @:},
                @:{
                @:    title: "@companyString2 [@topicString2]",
                @:    id: "g2",
                @:    valueAxis: "v1",
                @:    valueField: "topicNum2",
                @:    bullet: "round",
                @:    bulletBorderColor: "#FFFFFF",
                @:    bulletBorderAlpha: 1,
                @:    lineThickness: 2,
                @:    lineColor: "#0000ff",
                @:    negativeLineColor: "#0352b5",
                @:    balloonText: "[[category]]<br><b><span style='font-size:14px;'>value: [[value]]</span></b>"
            }
        }
        }],
        legend: {
            position: "bottom",
            valueText: "[[value]]",
            valueWidth: 100,
            valueAlign: "left",
            equalWidths: false,
            periodValueText: ""
        },
        chartCursor: {
            fullWidth: true,
            cursorAlpha: 0.1
        },
        chartScrollbar: {
            scrollbarHeight: 40,
            color: "#FFFFFF",
            autoGridCount: true,
            graph: "g1"
        },

        mouseWheelZoomEnabled: true
    });

    chart.addListener("dataUpdated", zoomChart);


    function generateChartData() {

        var newDate = new Date();
        var topicNum1 = 0;
        var data1 = new Array();
        var data2 = new Array();

        //Get the data from MySQL
        @{
            // Get an array from the first company and topic pair
            // Get a second array only if there is a second set
            var tempQueryTools = new MVC5App.Scripts.Test.QueryTools();
            queryString = tempQueryTools.findSurgeWithCompanyTopic(companyString, topicString, "%");
            topicList = queryString.Split('%');

            for (int i = 0; i < topicList.Length - 2; i++)
            {
                @:newDate = ParseDate("@topicList[i]");
                @:topicNum1 = @topicList[++i];
                if (!companyString2.IsEmpty() && !topicString2.IsEmpty())
                {
                    @:data1.push({date: newDate,topicNum1: topicNum1});
                }
                else
                {
                    @:chartData.push({date: newDate,topicNum1: topicNum1});
                }

            }

            if (!companyString2.IsEmpty() && !topicString2.IsEmpty())
            {
                queryString2 = tempQueryTools.findSurgeWithCompanyTopic(companyString2, topicString2, "%");
                topicList2 = queryString2.Split('%');

                for (int i = 0; i < topicList2.Length - 2; i++)
                {
                    @:newDate = ParseDate("@topicList2[i]");
                    @:topicNum2 = @topicList2[++i];
                    @:data2.push({date: newDate,topicNum2: topicNum2});
                }
            }
        }


        @{
            // Merge arrays from multiple datasets
            if (!companyString2.IsEmpty() && !topicString2.IsEmpty())
            {
                @:var i = 0;
                @:var j = 0;
                @:while (i < data1.length || j < data2.length)
                @:{
                    @:if (i >= data1.length)
                    @:{
                        @:chartData.push(data2[j]);
                        @:j++;
                    @:}
                    @:if (j >= data2.length)
                    @:{
                        @:chartData.push(data1[i]);
                        @:i++;
                    @:}

                    @:if (data1[i].date < data2[j].date)
                    @:{
                        @:chartData.push(data1[i]);
                        @:i++;
                    @:}
                    @:else if (data2[j].date < data1[i].date)
                    @:{
                        @:chartData.push(data2[j]);
                        @:j++;
                    @:}
                    @:else
                    @:{ //the dates are equal
                        @:chartData.push({ date: data1[i].date, topicNum1: data1[i].topicNum1, topicNum2: data2[j].topicNum2 });
                        @:i++;
                        @:j++;
                    @:}
                @:}
            }
        }
    }

    // this method is called when chart is first inited as we listen for "dataUpdated" event
    function zoomChart() {
        // different zoom methods can be used - zoomToIndexes, zoomToDates, zoomToCategoryValues
        chart.zoomToIndexes(chartData.length - 40, chartData.length - 1);
    }

    // changes cursor mode from pan to select
    function setPanSelect() {
        var chartCursor = chart.chartCursor;

        if (document.getElementById("rb1").checked) {
            chartCursor.pan = false;
            chartCursor.zoomable = true;

        } else {
            chartCursor.pan = true;
        }
        chart.validateNow();
    }
    </script>



    <div id="chartdiv" style="width: 100%; height: 400px; background-color:antiquewhite"></div>
    <div style="margin-left:35px;">
        <input type="radio" checked="true" name="group" id="rb1" onclick="setPanSelect()">Select
        <input type="radio" name="group" id="rb2" onclick="setPanSelect()">Pan
    </div>

    <hr />

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.6.4/angular.min.js"></script>
    
    <!-- Dynamicly load additional companies and topics using AngularJS -->
    <table style="width:100%">
        <tr>
            <td style="width:50%; vertical-align:top;">
                <div id="dvFirst">
                    <div ng-controller="myCtrl">

                        <h2 style="text-align:center">Company: @companyString</h2>
                        <h4 style="text-align:center">                            
                            <button ng-click="count = myWelcome; hdr = myHeader; score = myScore">More Topics</button>
                        </h4>
                        <table>
                            <tr><th>{{hdr}}</th><th>{{score}}</th><th></th></tr>
                            <tr href="#" ng-repeat="x in count.split(';')">
                                <td><a href="~/Home/PlotData?companyName=@companyString&topicName={{x.trim().split('|')[0]}}">{{x.trim().split('|')[0]}}</a></td>
                                <td>{{x.trim().split('|')[1]}}</td>
                                <td style="padding-left:10px"><a href="~/Home/PlotData?companyName=@companyString&topicName=@topicString&companyName2=@companyString&topicName2={{x.trim().split('|')[0]}}">Compare</a></td>
                            </tr>
                        </table>
                    </div>
                </div>
            </td>
            <td style="width:50%; vertical-align:top;">
                <div id="dvSecond">
                    <div ng-controller="myCtrl2">

                        <h2 style="text-align:center">Topic: @topicString</h2>
                        <h4 style="text-align:center">                            
                            <button ng-click="count2 = myWelcome2; hdr2 = myHeader2; score2 = myScore2;">More Companies</button>
                        </h4>
                        <table>
                            <tr><th>{{hdr2}}</th><th>{{score2}}</th><th></th></tr>
                            <tr href="#" ng-repeat="x2 in count2.split(';')">
                                <td><a href="~/Home/PlotData?companyName={{x2.trim().split('|')[0]}}&topicName=@topicString">{{x2.trim().split('|')[0]}}</a></td>
                                <td>{{x2.trim().split('|')[1]}}</td>
                                <td style="padding-left:10px"><a href="#">Compare</a></td>
                            </tr>
                        </table>
                    </div>
                </div>
            </td>
        </tr>
    </table>






    <script>
        // Angular JS implementation for dynamically loading data
    var firstApp = angular.module('firstApp', []);
    firstApp.controller('myCtrl', function ($scope, $http) {
        $http.get("/Home/SinglePage?companyName=@companyString")
            .then(function (response) {
                var topicList = response.data;
                $scope.myWelcome = topicList;
                $scope.myHeader = "Additional Topics";
                $scope.myScore = "Score";
            });
    });


    var secondApp = angular.module('secondApp', []);
    secondApp.controller('myCtrl2', function ($scope, $http) {
        $http.get("/Home/SinglePageCompanies?topicName=@topicString")
            .then(function (response) {
                var companyList = response.data;
                $scope.myWelcome2 = companyList;
                $scope.myHeader2 = "Additional Companies";
                $scope.myScore2 = "Score";
            });
    });

    var dvFirst = document.getElementById('dvFirst');
    var dvSecond = document.getElementById('dvSecond');

    angular.element(document).ready(function () {
        angular.bootstrap(dvFirst, ['firstApp']);
        angular.bootstrap(dvSecond, ['secondApp']);
    });

    </script>

</div>