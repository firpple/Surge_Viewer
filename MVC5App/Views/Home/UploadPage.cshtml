<!--
    Author: Evan Su
    Date: 5/7/2018
    Purpose:
        This page is designed to handle the file uploads for Surge viewer.
        The user will press the "select a file" button to select a CSV.
        The selected CSV will be upload to the database.
        During the upload, the user can cancel the upload by hitting the upload button.
    
    Structure:
        The majority of the codeis a html markup of the website itself.
        The file handling and reading is done by javascript.
        Javascript will read each line of the CSV spreadsheet and upload the entry using C#
    
           
    --->
<div class="jumbotron">
    <h2>Upload Surge Data (.csv)</h2>

    <p>Choose a CSV file to upload to the database. Once a file has been chosen, the uploads will be automatic</p>
    <input type="file" id="files" name="file" />


    <button onclick="abortRead();">Cancel read</button>
    <div id="progress_bar"><div class="percent">0%</div></div>
    <div id="byte_content"></div>
    <div id="byte_range"></div>


    <!-- 
        The following script handles file uploads.
        The function takes in a CSV file and will upload that file to the database.
        
        
        -->

    <script>
        var reader;
        var progress = document.querySelector('.percent');
        //function for canceling the reading
        function abortRead() {
            reader.abort();
        }
        //handles error events
        function errorHandler(evt) {
            switch (evt.target.error.code) {
                case evt.target.error.NOT_FOUND_ERR:
                    alert('File Not Found!');
                    break;
                case evt.target.error.NOT_READABLE_ERR:
                    alert('File is not readable');
                    break;
                case evt.target.error.ABORT_ERR:
                    break; // noop
                default:
                    alert('An error occurred reading this file.');
            };
        }

        function updateProgress(evt) {
            // evt is an ProgressEvent.
            if (evt.lengthComputable) {
                var percentLoaded = Math.round((evt.loaded / evt.total) * 100);
                // Increase the progress bar length.
                if (percentLoaded < 100) {
                    progress.style.width = percentLoaded + '%';
                    progress.textContent = percentLoaded + '%';
                }
            }
        }

        function handleFileSelect(evt) {
            // Reset progress indicator on new file selection.
            progress.style.width = '0%';
            progress.textContent = '0%';

            reader = new FileReader();
            reader.onerror = errorHandler;
            reader.onprogress = updateProgress;
            reader.onabort = function (e) {
                alert('File read cancelled');
            };
            reader.onloadstart = function (e) {
                document.getElementById('progress_bar').className = 'loading';
            };
            reader.onload = function (e) {
                // Ensure that the progress bar displays 100% at the end.
                progress.style.width = '100%';
                progress.textContent = '100%';
                setTimeout("document.getElementById('progress_bar').className='';", 2000);
            }

            reader.onloadend = function (evt) {
                if (evt.target.readyState == FileReader.DONE) { // DONE == 2

                    //this is the upload code
                    var output = "";
                    var allRows = evt.target.result.split('\n');
                    var parameterStrings = {};
                    //This for loop iterates through each of the row in the CSV
                    for (var singleRow = 0; singleRow < allRows.length; singleRow++) {
                        var rowCells = allRows[singleRow].split(',');
                        var rowString = allRows[singleRow];

                        //this is the actual function to handle insertion into the database call
                        document.getElementById('byte_content').textContent = rowString;
                        (function (inputString) {
                            $.ajax({
                                type: 'POST',
                                async: false,
                                url: '/WebForm1.aspx/InsertRow',
                                data: JSON.stringify({ rowStringInput: inputString }),
                                contentType: 'application/json; charset=utf-8',
                                dataType: 'json',
                                complete: function () {
                                    setTimeout(1000);
                                },
                                success: function (msg) {
                                    // Notice that msg.d is used to retrieve the result object
                                    //alert(msg.d);
                                    document.getElementById('byte_content').textContent = inputString;
                                },
                                error: function (xhr, status, error) {
                                    var err = eval("(" + xhr.responseText + ")");
                                    alert(err.Message);
                                }
                            });
                        })(rowString);

                    }

                    document.getElementById('byte_range').textContent =
                        ['Read bytes: ', start + 1, ' - ', stop + 1,
                            ' of ', file.size, ' byte file'].join('');

                }
            };

            // Read in the image file as a binary string.
            // This was a to-be implemented section for by section uploads
            // This currently reads the entire file. 
            reader.readAsBinaryString(evt.target.files[0]);
            var blob = file.slice(0, file.size - 1);
            reader.readAsBinaryString(blob);
        }

        document.getElementById('files').addEventListener('change', handleFileSelect, false);
    </script>
</div>